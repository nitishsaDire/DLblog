{
  
    
        "post0": {
            "title": "ML/DL techniques for Tabular Modeling PART I",
            "content": "Introduction . Tabular Modelling takes data in the form of a table, where generally we want to learn about a column&#39;s value from all the other columns&#39; values. The column we want to learn is known as a dependent variable and others are known as independent variables. The learning could be both like a classification problem or regression problem. We will look into various machine learning models such as decision trees, random forests, etc, also we&#39;ll look for what deep learning has to offer in tabular modeling. . Dataset . I will be using Kaggle competition dataset on all the models so that it will be easier to understand and compare different models. I have loaded it into a dataframe df. . df.head() . SalesID SalePrice MachineID ModelID ... Blade_Type Travel_Controls Differential_Type Steering_Controls . 0 1139246 | 66000.0 | 999089 | 3157 | ... | NaN | NaN | Standard | Conventional | . 1 1139248 | 57000.0 | 117657 | 77 | ... | NaN | NaN | Standard | Conventional | . 2 1139249 | 10000.0 | 434808 | 7009 | ... | NaN | NaN | NaN | NaN | . 3 1139251 | 38500.0 | 1026470 | 332 | ... | NaN | NaN | NaN | NaN | . 4 1139253 | 11000.0 | 1057373 | 17311 | ... | NaN | NaN | NaN | NaN | . 5 rows × 53 columns . The key fields are in train.csv are: . SalesID: the unique identifier of the sale | MachineID: the unique identifier of a machine. A machine can be sold multiple times | saleprice: what the machine sold for at auction (only provided in train.csv) | saledate: the date of the sale | . For this competition, we need to predict the log of the sale price of bulldozers sold at auctions. We will try to build different ML and DL models which will be predicting $log$(sale price). . Decision Trees . A decision tree makes a split in data based on the values of a column. For example, suppose we have data for different persons for their age, whether they eat healthy, whether they exercise, etc, and want to predict whether they are fit or unfit based on the data then we can use the following decision tree. . . At each level, the data at that level is divided into 2 groups for the next level, e.g. at the first level, whether age&lt;30 or not divides the whole dataset into 2 smaller datasets, and similar data is split again until we reach leaf node of 2 classes: FIT or UNFIT. . In the real world, data is way more complex containing a lot of columns. For example. in our dataframe df, there are 53 columns. So the question arises which column to chose for each split and what should be the value at which it is split. The answer is to try for every column and each value present in a column for the split. So if there are n columns and each column have x different values then we need to try n*x splits and chose the best one on some criteria. When trying a split, then whole data will be divided into 2 groups for that level, so we can take the average of the sale price of a group as the predicted sale price for all the rows in that group, and can calculate rmse distance between predictions and actual sale price. This will give us a number which if bigger tells our predictions are far from the actual sale price and vice-versa. So the algorithm for building a decision tree could be written as: . Loop through all the columns in the training dataset. | Loop through all the possible values for a column. If the column contains categorical data then chose the condition as &quot;equal to&quot; a category and &quot;not equal to&quot; a category. If the column contains continuous data then for all the distinct values split on &quot;less than equal to&quot; and &quot;greater than&quot; the value. | Find the average sale price for each of the groups, this is our prediction. Calculate rmse from the actual values of the saleprice. | The rmse of a split could be set as the sum of rmse for all groups after the split. | After looping through all the columns and all possible splits for each column chose the split with the least rmse. | Continue the same process recursively on the child groups until some stopping criteria are reached like maximum number of the leaf nodes, minimum number of data items per group, etc. | Below is given an example of a decision tree. In the root node, the value is simply the average of all the training dataset which would be the most simple prediction we could calculate for a new datapoint is to simply give a prediction of 10.1 every time. Mean Square Error (mse) is 0.48, and there is a total of 404710 samples, which is actually the total number of samples in the training dataset. . Now for the split, it would have tried many all the columns at all the possible values, and it came with $Coupler _System leq 0.5$ split. This would split the whole dataset into two smaller datasets. When the condition is false it resulted in 360847 samples, with mse of 0.42 and an average value of 10.21. When the condition is true it resulted in 43863 samples, with mse of 0.12 and an average value of 9.21. It could be seen that this split has improved our prediction because now the weighted average mse is (360847 0.42 + 43863 0.12)/(404710) = 0.38 &lt; 0.48. . Similarly, splitting the &quot;True condition child&quot; on $YearMade leq 0.42$ further decreases the mse, which means our predictions are further closer to the actual values . . Overfitting and Underfitting in decision trees . Underfitting in the decision trees will be when we make very few splits, or no splits at all, e.g., in the root node the average value is 10.1, and if we use this value as prediction, then it&#39;s clearly a straightforward solution to a complex problem, which is an underfitting. This is the case of high bias and low variance. . Overfitting will be when there are way too many splits such that in extreme case there is one sample per leaf node, which is actually the model has memorized the training dataset. It is overfitting because although the mse will be 0 for the training dataset, it will be very high for the validation dataset, as the model will fail to generalize on unseen datapoints. This is the case of low bias and high variance. . Data Generation step: . x = np.linspace(0, 10, 110) y = x + np.random.randn(110) my_list = [0]*30 + [1]*80 random.shuffle(my_list) my_list = [True if i==1 else False for i in my_list] tr_x, tr_y = x[np.where(my_list)[0]],y[np.where(my_list)[0]] my_list = [not elem for elem in my_list] val_x, val_y = x[np.where(my_list)[0]],y[np.where(my_list)[0]] tr_x = tr_x.reshape(tr_x.shape[0],1) val_x = val_x.reshape(val_x.shape[0],1) . Underfitting Case . In the underfitting case, I have set max_leaf_nodes=2, so that bias will be high. . m = DecisionTreeRegressor(max_leaf_nodes=2) m.fit(tr_x, tr_y); fig, ax = plt.subplots(figsize=(16,8)) ax.scatter(x,y, marker=&#39;+&#39;, label=&#39;actual data&#39;) ax.scatter(tr_x, m.predict(tr_x), label=&#39;predicted data on training dataset&#39;) ax.scatter(val_x, m.predict(val_x), label=&#39;predicted data on validation dataset&#39;) ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1)) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;y&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.legend(prop={&quot;size&quot;:15}) . &lt;matplotlib.legend.Legend at 0x7f9bc02d1748&gt; . In the above example, I have generated a dataset with $x = y + epsilon$, where $ epsilon in N(0,1)$ is noise. . A decision tree is implemented which tries to learn the relationship between x and y and predicts y from x. Training data is randomly chosen 80 samples from 110 samples, and the remaining 30 are in validation data. Stopping criteria is set as the max number of leaf nodes = 10. In the above figure, the orange ones are training samples and the green ones are validation samples. . print(f&#39;Training rmse is {m_rmse(m, tr_x, tr_y)}, and validation rmse is {m_rmse(m, val_x, val_y)}&#39;) draw_tree(m, pd.DataFrame([tr_x,tr_y], columns=[&#39;tr_y&#39;])) . Training rmse is 1.8183978903453226, and validation rmse is 1.6647204429757452 . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Tree 0 tr_y ≤ 5.0 mse = 10.0 samples = 80 value = 5.0 1 mse = 3.0 samples = 42 value = 3.0 0&#45;&gt;1 True 2 mse = 3.0 samples = 38 value = 8.0 0&#45;&gt;2 False Overfitting Case . In the overfitting case, I have set max_leaf_nodes=100. This leads to a huge decision tree with each leaf node containing one training example only. Therefore, bias will be zero, the variance will be high and there will be overfitting. . m = DecisionTreeRegressor(max_leaf_nodes=100) m.fit(tr_x, tr_y); fig, ax = plt.subplots(figsize=(16,8)) ax.scatter(x,y, marker=&#39;+&#39;, label=&#39;actual data&#39;) ax.scatter(tr_x, m.predict(tr_x), label=&#39;predicted data on training dataset&#39;) ax.scatter(val_x, m.predict(val_x), label=&#39;predicted data on validation dataset&#39;) ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1)) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;y&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.legend(prop={&quot;size&quot;:15}) . &lt;matplotlib.legend.Legend at 0x7f9bc0188390&gt; . print(f&#39;Training rmse is {m_rmse(m, tr_x, tr_y)}, and validation rmse is {m_rmse(m, val_x, val_y)}&#39;) draw_tree(m, pd.DataFrame([tr_x,tr_y], columns=[&#39;tr_y&#39;])) . Training rmse is 0.0, and validation rmse is 1.4056603064597266 . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Tree 0 tr_y ≤ 5.0 mse = 10.0 samples = 80 value = 5.0 1 tr_y ≤ 2.0 mse = 3.0 samples = 42 value = 3.0 0&#45;&gt;1 True 2 tr_y ≤ 8.0 mse = 3.0 samples = 38 value = 8.0 0&#45;&gt;2 False 3 tr_y ≤ 1.0 mse = 1.0 samples = 12 value = 0.0 1&#45;&gt;3 4 tr_y ≤ 4.0 mse = 1.0 samples = 30 value = 4.0 1&#45;&gt;4 11 tr_y ≤ 1.0 mse = 0.0 samples = 9 value = &#45;0.0 3&#45;&gt;11 12 tr_y ≤ 1.0 mse = 0.0 samples = 3 value = 1.0 3&#45;&gt;12 45 tr_y ≤ 1.0 mse = 0.0 samples = 7 value = 0.0 11&#45;&gt;45 46 tr_y ≤ 1.0 mse = 0.0 samples = 2 value = &#45;0.0 11&#45;&gt;46 47 tr_y ≤ 0.0 mse = 0.0 samples = 6 value = &#45;0.0 45&#45;&gt;47 48 mse = 0.0 samples = 1 value = 1.0 45&#45;&gt;48 65 mse = 0.0 samples = 1 value = 1.0 47&#45;&gt;65 66 tr_y ≤ 0.0 mse = 0.0 samples = 5 value = &#45;0.0 47&#45;&gt;66 77 tr_y ≤ 0.0 mse = 0.0 samples = 2 value = &#45;0.0 66&#45;&gt;77 78 tr_y ≤ 1.0 mse = 0.0 samples = 3 value = 0.0 66&#45;&gt;78 79 mse = 0.0 samples = 1 value = 0.0 77&#45;&gt;79 80 mse = 0.0 samples = 1 value = &#45;1.0 77&#45;&gt;80 81 mse = 0.0 samples = 1 value = 0.0 78&#45;&gt;81 82 tr_y ≤ 1.0 mse = 0.0 samples = 2 value = &#45;0.0 78&#45;&gt;82 127 mse = 0.0 samples = 1 value = &#45;0.0 82&#45;&gt;127 128 mse = &#45;0.0 samples = 1 value = &#45;0.0 82&#45;&gt;128 49 mse = 0.0 samples = 1 value = &#45;1.0 46&#45;&gt;49 50 mse = 0.0 samples = 1 value = 0.0 46&#45;&gt;50 83 mse = 0.0 samples = 1 value = 1.0 12&#45;&gt;83 84 tr_y ≤ 1.0 mse = 0.0 samples = 2 value = 1.0 12&#45;&gt;84 133 mse = 0.0 samples = 1 value = 2.0 84&#45;&gt;133 134 mse = &#45;0.0 samples = 1 value = 1.0 84&#45;&gt;134 7 tr_y ≤ 2.0 mse = 1.0 samples = 18 value = 3.0 4&#45;&gt;7 8 tr_y ≤ 4.0 mse = 0.0 samples = 12 value = 5.0 4&#45;&gt;8 15 tr_y ≤ 2.0 mse = 2.0 samples = 4 value = 2.0 7&#45;&gt;15 16 tr_y ≤ 3.0 mse = 0.0 samples = 14 value = 3.0 7&#45;&gt;16 17 mse = 0.0 samples = 1 value = 4.0 15&#45;&gt;17 18 tr_y ≤ 2.0 mse = 1.0 samples = 3 value = 2.0 15&#45;&gt;18 19 mse = 0.0 samples = 1 value = 1.0 18&#45;&gt;19 20 tr_y ≤ 2.0 mse = 0.0 samples = 2 value = 2.0 18&#45;&gt;20 43 mse = 0.0 samples = 1 value = 3.0 20&#45;&gt;43 44 mse = 0.0 samples = 1 value = 2.0 20&#45;&gt;44 53 tr_y ≤ 2.0 mse = 0.0 samples = 4 value = 3.0 16&#45;&gt;53 54 tr_y ≤ 3.0 mse = 1.0 samples = 10 value = 3.0 16&#45;&gt;54 59 tr_y ≤ 2.0 mse = 0.0 samples = 2 value = 3.0 53&#45;&gt;59 60 tr_y ≤ 2.0 mse = 0.0 samples = 2 value = 4.0 53&#45;&gt;60 145 mse = 0.0 samples = 1 value = 3.0 59&#45;&gt;145 146 mse = 0.0 samples = 1 value = 3.0 59&#45;&gt;146 135 mse = 0.0 samples = 1 value = 4.0 60&#45;&gt;135 136 mse = 0.0 samples = 1 value = 4.0 60&#45;&gt;136 55 tr_y ≤ 3.0 mse = 1.0 samples = 2 value = 2.0 54&#45;&gt;55 56 tr_y ≤ 3.0 mse = 0.0 samples = 8 value = 3.0 54&#45;&gt;56 57 mse = 0.0 samples = 1 value = 3.0 55&#45;&gt;57 58 mse = 0.0 samples = 1 value = 1.0 55&#45;&gt;58 85 tr_y ≤ 3.0 mse = 0.0 samples = 5 value = 3.0 56&#45;&gt;85 86 tr_y ≤ 4.0 mse = 0.0 samples = 3 value = 3.0 56&#45;&gt;86 87 tr_y ≤ 3.0 mse = 0.0 samples = 2 value = 3.0 85&#45;&gt;87 88 tr_y ≤ 3.0 mse = 0.0 samples = 3 value = 3.0 85&#45;&gt;88 89 mse = 0.0 samples = 1 value = 3.0 87&#45;&gt;89 90 mse = &#45;0.0 samples = 1 value = 2.0 87&#45;&gt;90 91 tr_y ≤ 3.0 mse = 0.0 samples = 2 value = 3.0 88&#45;&gt;91 92 mse = 0.0 samples = 1 value = 4.0 88&#45;&gt;92 147 mse = 0.0 samples = 1 value = 3.0 91&#45;&gt;147 148 mse = &#45;0.0 samples = 1 value = 3.0 91&#45;&gt;148 125 tr_y ≤ 3.0 mse = 0.0 samples = 2 value = 3.0 86&#45;&gt;125 126 mse = 0.0 samples = 1 value = 3.0 86&#45;&gt;126 129 mse = 0.0 samples = 1 value = 3.0 125&#45;&gt;129 130 mse = 0.0 samples = 1 value = 3.0 125&#45;&gt;130 33 tr_y ≤ 4.0 mse = 0.0 samples = 5 value = 4.0 8&#45;&gt;33 34 tr_y ≤ 5.0 mse = 0.0 samples = 7 value = 5.0 8&#45;&gt;34 35 tr_y ≤ 4.0 mse = 0.0 samples = 2 value = 5.0 33&#45;&gt;35 36 tr_y ≤ 4.0 mse = 0.0 samples = 3 value = 4.0 33&#45;&gt;36 67 mse = 0.0 samples = 1 value = 4.0 35&#45;&gt;67 68 mse = 0.0 samples = 1 value = 5.0 35&#45;&gt;68 93 mse = 0.0 samples = 1 value = 4.0 36&#45;&gt;93 94 tr_y ≤ 4.0 mse = 0.0 samples = 2 value = 4.0 36&#45;&gt;94 95 mse = 0.0 samples = 1 value = 3.0 94&#45;&gt;95 96 mse = &#45;0.0 samples = 1 value = 4.0 94&#45;&gt;96 107 tr_y ≤ 5.0 mse = 0.0 samples = 4 value = 5.0 34&#45;&gt;107 108 tr_y ≤ 5.0 mse = 0.0 samples = 3 value = 5.0 34&#45;&gt;108 117 tr_y ≤ 4.0 mse = 0.0 samples = 3 value = 5.0 107&#45;&gt;117 118 mse = &#45;0.0 samples = 1 value = 5.0 107&#45;&gt;118 119 mse = 0.0 samples = 1 value = 5.0 117&#45;&gt;119 120 tr_y ≤ 4.0 mse = 0.0 samples = 2 value = 5.0 117&#45;&gt;120 121 mse = 0.0 samples = 1 value = 5.0 120&#45;&gt;121 122 mse = 0.0 samples = 1 value = 5.0 120&#45;&gt;122 109 mse = 0.0 samples = 1 value = 4.0 108&#45;&gt;109 110 tr_y ≤ 5.0 mse = 0.0 samples = 2 value = 5.0 108&#45;&gt;110 137 mse = 0.0 samples = 1 value = 5.0 110&#45;&gt;137 138 mse = 0.0 samples = 1 value = 5.0 110&#45;&gt;138 5 tr_y ≤ 8.0 mse = 1.0 samples = 22 value = 6.0 2&#45;&gt;5 6 tr_y ≤ 10.0 mse = 1.0 samples = 16 value = 9.0 2&#45;&gt;6 9 tr_y ≤ 6.0 mse = 1.0 samples = 17 value = 6.0 5&#45;&gt;9 10 tr_y ≤ 8.0 mse = 0.0 samples = 5 value = 8.0 5&#45;&gt;10 21 tr_y ≤ 6.0 mse = 1.0 samples = 7 value = 6.0 9&#45;&gt;21 22 tr_y ≤ 7.0 mse = 1.0 samples = 10 value = 6.0 9&#45;&gt;22 23 tr_y ≤ 5.0 mse = 0.0 samples = 5 value = 6.0 21&#45;&gt;23 24 tr_y ≤ 6.0 mse = 2.0 samples = 2 value = 5.0 21&#45;&gt;24 115 tr_y ≤ 5.0 mse = 0.0 samples = 3 value = 6.0 23&#45;&gt;115 116 tr_y ≤ 6.0 mse = 0.0 samples = 2 value = 6.0 23&#45;&gt;116 139 mse = 0.0 samples = 1 value = 6.0 115&#45;&gt;139 140 tr_y ≤ 5.0 mse = 0.0 samples = 2 value = 6.0 115&#45;&gt;140 155 mse = 0.0 samples = 1 value = 6.0 140&#45;&gt;155 156 mse = 0.0 samples = 1 value = 6.0 140&#45;&gt;156 149 mse = 0.0 samples = 1 value = 6.0 116&#45;&gt;149 150 mse = &#45;0.0 samples = 1 value = 6.0 116&#45;&gt;150 25 mse = 0.0 samples = 1 value = 3.0 24&#45;&gt;25 26 mse = &#45;0.0 samples = 1 value = 6.0 24&#45;&gt;26 27 tr_y ≤ 6.0 mse = 0.0 samples = 5 value = 7.0 22&#45;&gt;27 28 tr_y ≤ 7.0 mse = 2.0 samples = 5 value = 6.0 22&#45;&gt;28 69 mse = 0.0 samples = 1 value = 6.0 27&#45;&gt;69 70 tr_y ≤ 6.0 mse = 0.0 samples = 4 value = 7.0 27&#45;&gt;70 131 tr_y ≤ 6.0 mse = 0.0 samples = 3 value = 7.0 70&#45;&gt;131 132 mse = &#45;0.0 samples = 1 value = 7.0 70&#45;&gt;132 141 mse = 0.0 samples = 1 value = 7.0 131&#45;&gt;141 142 tr_y ≤ 6.0 mse = 0.0 samples = 2 value = 7.0 131&#45;&gt;142 143 mse = 0.0 samples = 1 value = 7.0 142&#45;&gt;143 144 mse = &#45;0.0 samples = 1 value = 7.0 142&#45;&gt;144 29 mse = 0.0 samples = 1 value = 3.0 28&#45;&gt;29 30 tr_y ≤ 7.0 mse = 1.0 samples = 4 value = 7.0 28&#45;&gt;30 31 tr_y ≤ 7.0 mse = 1.0 samples = 2 value = 7.0 30&#45;&gt;31 32 tr_y ≤ 7.0 mse = 0.0 samples = 2 value = 6.0 30&#45;&gt;32 37 mse = 0.0 samples = 1 value = 6.0 31&#45;&gt;37 38 mse = 0.0 samples = 1 value = 8.0 31&#45;&gt;38 153 mse = 0.0 samples = 1 value = 6.0 32&#45;&gt;153 154 mse = 0.0 samples = 1 value = 6.0 32&#45;&gt;154 97 mse = 0.0 samples = 1 value = 7.0 10&#45;&gt;97 98 tr_y ≤ 8.0 mse = 0.0 samples = 4 value = 8.0 10&#45;&gt;98 99 mse = 0.0 samples = 1 value = 8.0 98&#45;&gt;99 100 tr_y ≤ 8.0 mse = 0.0 samples = 3 value = 8.0 98&#45;&gt;100 101 mse = 0.0 samples = 1 value = 7.0 100&#45;&gt;101 102 tr_y ≤ 8.0 mse = 0.0 samples = 2 value = 8.0 100&#45;&gt;102 111 mse = 0.0 samples = 1 value = 8.0 102&#45;&gt;111 112 mse = &#45;0.0 samples = 1 value = 8.0 102&#45;&gt;112 13 tr_y ≤ 9.0 mse = 0.0 samples = 15 value = 9.0 6&#45;&gt;13 14 mse = 0.0 samples = 1 value = 11.0 6&#45;&gt;14 39 tr_y ≤ 9.0 mse = 0.0 samples = 7 value = 10.0 13&#45;&gt;39 40 tr_y ≤ 9.0 mse = 0.0 samples = 8 value = 9.0 13&#45;&gt;40 61 tr_y ≤ 9.0 mse = 0.0 samples = 6 value = 10.0 39&#45;&gt;61 62 mse = 0.0 samples = 1 value = 10.0 39&#45;&gt;62 63 tr_y ≤ 8.0 mse = 0.0 samples = 2 value = 10.0 61&#45;&gt;63 64 tr_y ≤ 9.0 mse = 0.0 samples = 4 value = 9.0 61&#45;&gt;64 157 mse = 0.0 samples = 1 value = 10.0 63&#45;&gt;157 158 mse = 0.0 samples = 1 value = 10.0 63&#45;&gt;158 103 tr_y ≤ 9.0 mse = 0.0 samples = 3 value = 9.0 64&#45;&gt;103 104 mse = &#45;0.0 samples = 1 value = 9.0 64&#45;&gt;104 105 mse = 0.0 samples = 1 value = 9.0 103&#45;&gt;105 106 tr_y ≤ 9.0 mse = 0.0 samples = 2 value = 10.0 103&#45;&gt;106 151 mse = 0.0 samples = 1 value = 10.0 106&#45;&gt;151 152 mse = 0.0 samples = 1 value = 10.0 106&#45;&gt;152 41 tr_y ≤ 9.0 mse = 0.0 samples = 3 value = 8.0 40&#45;&gt;41 42 tr_y ≤ 9.0 mse = 0.0 samples = 5 value = 10.0 40&#45;&gt;42 113 mse = 0.0 samples = 1 value = 8.0 41&#45;&gt;113 114 tr_y ≤ 9.0 mse = 0.0 samples = 2 value = 9.0 41&#45;&gt;114 123 mse = 0.0 samples = 1 value = 9.0 114&#45;&gt;123 124 mse = 0.0 samples = 1 value = 8.0 114&#45;&gt;124 51 mse = 0.0 samples = 1 value = 10.0 42&#45;&gt;51 52 tr_y ≤ 9.0 mse = 0.0 samples = 4 value = 9.0 42&#45;&gt;52 71 mse = 0.0 samples = 1 value = 9.0 52&#45;&gt;71 72 tr_y ≤ 10.0 mse = 0.0 samples = 3 value = 10.0 52&#45;&gt;72 73 tr_y ≤ 10.0 mse = 0.0 samples = 2 value = 10.0 72&#45;&gt;73 74 mse = &#45;0.0 samples = 1 value = 9.0 72&#45;&gt;74 75 mse = 0.0 samples = 1 value = 9.0 73&#45;&gt;75 76 mse = &#45;0.0 samples = 1 value = 10.0 73&#45;&gt;76 Balanced Case . In the balanced case, I have set max_leaf_nodes=10. This leads to a nice decision tree implementation with better generalization power than both above cases, which could be confirmed by seeing training and validation losses. . m = DecisionTreeRegressor(max_leaf_nodes=10) m.fit(tr_x, tr_y); fig, ax = plt.subplots(figsize=(16,8)) ax.scatter(x,y, marker=&#39;+&#39;, label=&#39;actual data&#39;) ax.scatter(tr_x, m.predict(tr_x), label=&#39;predicted data on training dataset&#39;) ax.scatter(val_x, m.predict(val_x), label=&#39;predicted data on validation dataset&#39;) ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1)) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;y&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.legend(prop={&quot;size&quot;:15}) . &lt;matplotlib.legend.Legend at 0x7f9bc025ec18&gt; . It seems like a good fit because it&#39;s neither overfitting nor underfitting. . Below is the training and validation losses and complete decision tree as generated by the algorithm. . print(f&#39;Training rmse is {m_rmse(m, tr_x, tr_y)}, and validation rmse is {m_rmse(m, val_x, val_y)}&#39;) draw_tree(m, pd.DataFrame([tr_x,tr_y], columns=[&#39;tr_y&#39;])) . Training rmse is 0.7844421980936919, and validation rmse is 1.1465603238027826 . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Tree 0 tr_y ≤ 5.0 mse = 10.0 samples = 80 value = 5.0 1 tr_y ≤ 2.0 mse = 3.0 samples = 42 value = 3.0 0&#45;&gt;1 True 2 tr_y ≤ 8.0 mse = 3.0 samples = 38 value = 8.0 0&#45;&gt;2 False 3 tr_y ≤ 1.0 mse = 1.0 samples = 12 value = 0.0 1&#45;&gt;3 4 tr_y ≤ 4.0 mse = 1.0 samples = 30 value = 4.0 1&#45;&gt;4 11 mse = 0.0 samples = 9 value = &#45;0.0 3&#45;&gt;11 12 mse = 0.0 samples = 3 value = 1.0 3&#45;&gt;12 7 tr_y ≤ 2.0 mse = 1.0 samples = 18 value = 3.0 4&#45;&gt;7 8 mse = 0.0 samples = 12 value = 5.0 4&#45;&gt;8 15 tr_y ≤ 2.0 mse = 2.0 samples = 4 value = 2.0 7&#45;&gt;15 16 mse = 0.0 samples = 14 value = 3.0 7&#45;&gt;16 17 mse = 0.0 samples = 1 value = 4.0 15&#45;&gt;17 18 mse = 1.0 samples = 3 value = 2.0 15&#45;&gt;18 5 tr_y ≤ 8.0 mse = 1.0 samples = 22 value = 6.0 2&#45;&gt;5 6 tr_y ≤ 10.0 mse = 1.0 samples = 16 value = 9.0 2&#45;&gt;6 9 mse = 1.0 samples = 17 value = 6.0 5&#45;&gt;9 10 mse = 0.0 samples = 5 value = 8.0 5&#45;&gt;10 13 mse = 0.0 samples = 15 value = 9.0 6&#45;&gt;13 14 mse = 0.0 samples = 1 value = 11.0 6&#45;&gt;14 Extrapolation problem . The decision tree suffers from a serious drawback when trying to predict them on data outside the domain of the current dataset. Suppose we have split the dataset into training and validation such as included the first 80 datapoints in the training and the remaining 30 datapoints in the validation dataset, like: . tr_x, tr_y = x[:80], y[:80] val_x, val_y = x[80:], y[80:] . m = DecisionTreeRegressor(max_leaf_nodes=10) tr_x, tr_y = x[:80], y[:80] val_x, val_y = x[80:], y[80:] tr_x = tr_x.reshape(80,1) val_x = val_x.reshape(30,1) m.fit(tr_x, tr_y); fig, ax = plt.subplots(figsize=(16,8)) ax.scatter(x,y, marker=&#39;+&#39;, label=&#39;actual data&#39;) ax.scatter(tr_x, m.predict(tr_x), label=&#39;predicted data on training dataset&#39;) ax.scatter(val_x, m.predict(val_x), label=&#39;predicted data on validation dataset&#39;) ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(1)) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;y&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.legend(prop={&quot;size&quot;:15}) . &lt;matplotlib.legend.Legend at 0x7f9bb1f44358&gt; . In the above figure, because the validation data is in the range $x&gt;7.2$ something, and training data has only seen datapoints which are in the range $0 leq x leq7.2$, therefore validation data is out of the domain, and hence a poor extrapolation is done by decision trees. . Conclusion . We have covered the most basic ML method for tabular data modeling. In the next parts, I will cover Random Forests and some DL methods. Also, there is no point in training a decision tree model on the Kaggle dataset because it will give poor results as the data is complex, and it needs some more sophisticated algorithms. .",
            "url": "https://nitishsadire.github.io/DLblog/2020/11/10/DLforCNN.html",
            "relUrl": "/2020/11/10/DLforCNN.html",
            "date": " • Nov 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Optimization Algorithms Part II",
            "content": "Introduction . In the last post, we have discussed some widely used optimization algorithms for updating parameters in a Neural Network. All the covered algorithms need a good learning rate $ alpha$, otherwise, these algorithms won&#39;t work as desired, and finding the learning rate (one of the most important hyperparameter) is tricky and needs experimenting with different learning rates on the training dataset which takes a lot of computational power. . The other part of optimization algorithms comes under Adaptive Learning Rate Methods. The super benefit of these that they don&#39;t need fine-tuning of learning rates, it adapts learning rates to the parameters, performing updates by itself. . Adagrad . Adagrad algorithm does larger updates for infrequent parameters and smaller updates for frequent parameters. So it&#39;s beneficial for sparse data. Mathematically, . $x_{t+1} = x_t - frac{ alpha}{ sqrt{grad _squared + epsilon}}. frac{ partial{L}}{ partial{x_t}}$ . Here, $grad _squared$ is the square of the gradients for a parameter from the beginning, $ epsilon$ is usually of the order $1e-8$ to prevent division by zero error. Here $ alpha$ is the learning rate which is usually fixed at $0.01$. For frequent parameters, their gradients tend to grow bigger in squared sum than infrequent parameters. Therefore $ frac{1}{grad _squared}$ will be bigger for infrequent and smaller for frequent parameters, which will scale the learning rate accordingly. It will also solve the zigzag path problem as discussed in last post. . One issue with the Adagrad algorithm is that over time $ frac{1}{grad _squared}$ will be very small, and so the net learning rate will be very low which will make the learning of the model slow. . RMSProp . RMSProp is similar to Adagrad and tries to solve the problems encountered by Adagrad. Instead of maintaining the sum of the square of gradients of a parameter from the beginning, it does it for some window of past gradients. It maintains the window by the running mean of the square of gradients with an exponentially decaying rate. Mathematically, . $grad _squared = gamma * grad _squared + (1 - gamma)*grad _squared$ . $ gamma$ is usually kept at $0.9$, or $0.99$. . Adam . Adam stands for Adaptive Moment Estimation, and it&#39;s the most widely used Adaptive Learning Rate Method. Like Adagrad and RMSProp, it also maintains exponentially decaying mean of past gradients squares, but it also maintains exponentially decaying mean of past gradients. Mathematically, . $m_{t} = beta_1m_{t-1} + (1- beta_1)g_{t}$ . $v_{t} = beta_2v_{t-1} + (1- beta_2)g_{t}^2$ . where $g_t$ is the gradient computed at time $t$. $ beta_1$ and $ beta_2$ are generally kept close to 1 like 0.9 and 0.99 respectively. Like in other methods, $m_0$ and $v_0$ are initialized to 0. One issue because of that is the successive values of $m$ and $v$ became biased towards 0. The reason for this is because at $t=0$, $m_1$ is $0.1 * g_1$ and $0.9 * 0$, therefore the initial values of $m_t$ became much smaller and only after sometime it the bias is reduced. This is explained in the code below. The bias correction term for each of $m_{t}$ and $v_{t}$ is $ frac{1}{1 - beta_1^{t}}$ and $ frac{1}{1 - beta_2^{t}}$ respectively. Therefore, . $ hat{m}_{t} = frac{m_{t}}{1 - beta_1^{t}}$ . $ hat{v}_{t} = frac{v_{t}}{1 - beta_2^{t}}$ . And for each parameter $x$, it&#39;s updated as: . $x_{t+1} = x_t - frac{ alpha}{ sqrt{ hat{v}_t + epsilon}} hat{m}_t$ . For random integers in [1, 100], m contains moving average with exponentially decaying weights, m_bias_corrected also contains exponentially decaying mean but with bias correction (Pardon me if code is not as expressive and clear as it should be, you can simply skip and just understand the plot). . y = np.random.randint(1,100,30) beta1 = 0.9 m = [] m_bias_corrected = [] m.append(0) m_bias_corrected.append(0) for idx, g in enumerate(y): val = beta1*m[idx] + (1-beta1)*g m.append(val) m_bias_corrected.append(val/(1 - beta1**(idx + 1))) fig, ax = plt.subplots(figsize = (20, 12)) ax.plot(range(y.shape[0]), y, linestyle = &#39;:&#39;, linewidth =3, marker = &#39;.&#39;, label = &#39;data&#39;, markersize = 10) ax.plot(range(y.shape[0]), m[1:], linestyle = &#39;:&#39;, linewidth = 3, marker = &#39;v&#39;, markersize = 10, label=&#39;uncorrected_bias&#39;) ax.plot(range(y.shape[0]), m_bias_corrected[1:], linestyle = &#39;:&#39;, linewidth = 3, marker = &quot;o&quot;, markersize = 10, label=&#39;corrected_bias&#39;) ax.xaxis.set_major_locator(mpl.ticker.MultipleLocator(5)) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.set_xlabel(&quot;iterations&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;values&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.legend(prop={&quot;size&quot;:20}) . &lt;matplotlib.legend.Legend at 0x7f1659e4eb00&gt; . The orange line is uncorrected exponential moving average, and green is the corrected one. You can see for initial iterations the gap between them is quite big. This gap is reducing as we are moving to later iterations. The reason for these smaller values in the orange one is because 0.9 weight is given to 0 for $x_1$. This gap after 100s of iterations becomes negligible. . Conclusion . In the 2 part post, I have discussed the most commonly used non-adaptive and adaptive algorithms. There is a clear benefit of using adaptive ones because of no need to fine-tune the learning rate, also if the data is sparse then adaptive learning methods work better. RMSProp is an extension to Adagrad which deals with diminishing gradient values for the later iterations. Adam is a further improvement over RMSProp because of the bias correction, and therefore might be the best overall choice. .",
            "url": "https://nitishsadire.github.io/DLblog/2020/11/03/DLforCNN.html",
            "relUrl": "/2020/11/03/DLforCNN.html",
            "date": " • Nov 3, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Optimization Algorithms Part I",
            "content": "Introduction . There are millions of parameters in a typical deep neural network, and these parameters are initialized with random values. Now as the training proceeds, as mentioned in the previous post, we fed the training examples into the network and compute loss using a loss function, and take gradients of loss w.r.t. all the parameters so as to update them. Now with the updated network parameters we again fed the training data, and this process repeats time and again until the loss converges. The part where we update the parameters of the network is the focus of today&#39;s post. . To update a parameter means to change it&#39;s value so as to minimize the loss we incurred. It is an optimization problem where the objective function is the loss function $L(w)$, $w$ is the parameter we are updating, and ideally, we want to find the global minima of loss function $L$ for parameter w, if such global minima exist, otherwise find local minima. One such method to find a minima. as mentioned in the previous post, as Gradient Descent (GD) also known as Vanilla Gradient Descent, where we take a small step in the direction of the negative gradient ($- frac{ partial{L}}{ partial{w}}$). There are numerous issues with GD, like: . Too much memory is required to feed all the training examples at once to the model. | What if we reached a saddle point (a point which is not local extremum but having gradient 0, please refer wikipedia), then gradient will be zero there and no updation will happen. | Because of such issues, it&#39;s hardly used in practice. Other optimization algorithms have fundamental ideas the same as gradient descent but they encounter the issues faced by it. . Stochastic Gradient Descent (SGD) . It&#39;s a computational improvement over gradient descent as rather than feeding the whole training data it feeds data in batches. So if there are n training examples, then the batch size $b$ could be $1 leq b leq n$. Batch-size is chosen based on memory availability. Mathematically, . $x_{t+1} = x_t - alpha. frac{ partial{L}}{ partial{x_t}}$ . Some of the issues with SGD are: . Not whole data is fed at once, so gradients will be noisy. By noisy I mean that because each batch will have a different set of examples, so they try to change the parameters in different directions, therefore there won&#39;t be a smooth curve to the minima, as shown below. | . . What if the rate of change of loss is different in different directions. For example, as shown below, the contours of loss function form an ellipse, and function changes faster along the y-axis than the x-axis. Therefore the magnitude of the gradient along the y-axis will be more than the x-axis, and so the net direction of the gradient will align more with the y-axis. Therefore, the negative of the gradient will also align more with the y-axis, and hence the SGD will follow a zigzag path, which will take longer to converge. | . . Issues with saddle points still exists. | . SGD + Momentum . In SGD with Momentum, at any time t+1, the direction is not determined by $x_t$, but all the gradients from the beginning. Mathematically, if $v_0 = 0$ then, . $v_{t+1} = rho v_t + frac{ partial{L}}{ partial{x_t}}$ . $x_{t+1} = x_t - alpha.v_{t+1}$ . typically, $ rho$=0.9, or 0.99. $v_t$ is known as velocity which is actually the running mean of gradients. Velocity at a point has exponentially decaying weighted sum of previous gradients (older the gradient is less is its weight). Therefore it&#39;s less noisy than SGD because gradients of other batches are also added. . Also in case of different rates of change of loss along with different dimensions, velocity gives better direction, plus the dimension along which there is less rate of change of loss function will have better velocity than in a normal SGD. So convergence will be faster as the path will be less zigzag. The velocity increases for dimension whose gradients point in the same direction and reduces for dimensions whose updates are in different directions. Therefore there will be less oscillation while converging. . It won&#39;t get stuck in saddle point because of velocity. Also, it will overshoot local minima but will come back and approach the minima again. . Nesterov Momentum . One issue with SGD+Momentum is that the gradients could accumulate which leads to a high gradient in a particular direction, which is not good because it could surpass the local minima, also convergence will be slower as it has to move back and forth to reach a local minima. Imagine like a ball is running downhill, then SGD+Momentum could be thought of as ball accumulating very high velocity, so could surpass a local minima and will try to climb an uphill. Nesterov Momentum update tries to correct this &quot;blindly following the slope&quot; nature of SGD+Momentum by calculating the slope of the future point, and moving in the -ve of net gradient direction. Mathematically, . $v_{t+1} = rho v_t + alpha nabla_{x_t}L(x_t - rho v_t)$ . $x_{t+1} = x_t - v_{t+1}$ . So here, firstly gradient of loss function L w.r.t to $x_t$ is computed at the approximate future point $x_t - rho v_t$ (it&#39;s approximate because actual future point is $x_t - rho v_t -$ gradient_of_L_w.r.t_x_t), so we have gradient knowledge of the next point. Now we add accumulated velocities to it and make an update on x. . This anticipatory update prevents us from going too fast and results in better updates, which has significantly increased performance on DL models. Now, we are able to adapt our updates to the slope of our error function and speed up SGD in turn. . SGD+Momentum and Nesterov Momentum updates are shown below in the figure. SGD+M computes gradient first (small blue vector) and then takes a step in the net direction of -ve accumulated gradients (big blue vector). Whereas, Nesterov goes in the direction of previously accumulated gradients (big brown vector), then finds gradient at approximate next point, and takes a step in -ve gradient direction (small red vector), so that the resultant direction (big green vector) is different from SGD+M. . . Conclusion . We have covered Vanilla GD, SGD, SGD+Momentum, and Nesterov Momentum algorithms. All these optimization algorithms need a fine learning rate $ alpha$. If $ alpha$ too big then it will surpass the local minima or even diverge, if it&#39;s too small then convergence will be very slow. In Part II, we&#39;ll look at adaptive optimization algorithms, that will manage the learning rate for every parameter by itself, which is a very huge benefit over non-adaptive algorithms we have covered so far. .",
            "url": "https://nitishsadire.github.io/DLblog/2020/10/28/DLforCNN.html",
            "relUrl": "/2020/10/28/DLforCNN.html",
            "date": " • Oct 28, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Activation Function",
            "content": "Introduction . We have seen in the last post that each neuron has weights, bias, and an activation function associated with it. It receives inputs $x_i$, each input $x_i$ is multiplied with weight $w_i$, and bias $b$ is added to the final product, therefore $sum = Sigma{(w_i.x_i)} + b$. Now activation function $ phi()$ is applied on the sum, so $y = phi( Sigma{(w_i.x_i)} + b )$. . If $w$ is a vector where $i^{th}$ value is $w_i$, and $x$ is vector where $i^{th}$ value is $x_i$, then $ Sigma{(w_i.x_i)} + b$ could be written as $w.x^T + b$. There output from a neuron is $ phi( w.x^T + b)$. . Need for the activation function . Suppose there are two neurons, one after another, and the output of the first is input to the second neuron, and there are no activation functions involved. Then, . $y_1 = w_1.x^T + b_1$ . $y_2 = w_2.{y_1}^T + b_2$ . If we substitute $y_1$ in second equation RHS then these both could be written together in a single equation as: $y_2 = w.x^T + b$, where $w = w_2.w_1$ and $b = w_2.b_1 + b_2$. . Therefore, we have replaced 2 linear layers with a single linear layer by changing the weights and bias as mentioned. This could be done even if we have 100s of linear layers stacked upon one another, thus, no matter how deep our network is we can re-write it as a single layer network. If we introduce a non-linear layer in between every 2 linear layers, then we can&#39;t replace them with a single neuron. Now each linear layer is actually somewhat decoupled from the other ones and can do its own useful work. . The addition of a non-linear layer or an activation function increases the power of a neural network. By power I mean our network could approximate any function (neural network could be seen as a function which maps an input $x$ to an output $y$), with accuracy as good as we want, all we have to do is to find the right set of weights and biases to do it. This fact is mathematically proven as a universal approximation theorem. . A single nonlinearity with two linear layers is enough to approximate any function. So why would we use deeper models? The reason is performance. With a deeper model (that is, one with more layers) we do not need to use as many parameters; it turns out that we can use smaller matrices with more layers, and get better results than we would get with larger matrices and few layers.$^{**}$ . Some commonly used activation functions . Sigmoid . A sigmoid function is defined as: . $sigmoid(x) = frac{1}{1+e^{-x}}$ . x = np.linspace(-7,7,100) y = 1/(1 + np.exp(-x)) fig,ax = plt.subplots(figsize = (5,5)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.plot(x, y, color=&#39;red&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f5f5161fba8&gt;] . So, a sigmoid function squashes any real number in the range $(0,1)$, therefore, interpretable as probabilities. One of the big disadvantages of the sigmoid function is that its output is not zero-centered, which will be input to the next layer. . The problem if input data is not zero-centered data: . Mostly input data is +ve, so if $a = WX + b$, and $X$ is +ve, then the gradient of $W$ is +ve, or -ve, depending on the value $ frac{ partial{L}}{ partial{a}}$. So if optimal $W$ has both +ve and -ve values, but we end up searching for sub-optimal $W$. in case of 2-d, if $W_{opt}$ lies in $2^{nd}$ or $4^{th}$ quadrant, but we are only searching only in $1^{st}$ and $3^{rd}$ quadrant. . Another issue that saturated values kill the gradients during backpropagation, means that when input is a big positive or a negative number, then the slope of sigmoid in that region is very close to 0. So, in backpropagation, it gives a gradient close to 0 to its previous layers, and therefore very small or practically no weight-updation is performed on the network, thus network stops training. This is vanishing gradient problem. . Tanh . This is a hyperbolic tangent function with the range in (-1, 1), which makes it zero centered, a benefit over sigmoid. . y = np.tanh(x) fig,ax = plt.subplots(figsize = (5,5)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.plot(x, y, color=&#39;red&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f5f5162e390&gt;] . In tanh also, saturated values kill the gradients during backpropagation, and therefore vanishing gradient problem still exists. . RELU . It is the most widely used activation function which is surprisingly mathematically simpler than sigmoid, or tanh, and mostly gives better results than them. It is defined as: . $RELU(x) = max(x,0)$ . y = np.maximum(x,0) fig,ax = plt.subplots(figsize = (5,5)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.plot(x, y, color=&#39;red&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f5f5155bba8&gt;] . Some of the key points regarding RELU are: . Doesn’t saturate in the +ve region. | Computationally efficient to compute. | Convergence is faster. | Not zero centered outputs. | Gradient saturation in the negative half. | RELU has one major issue that it suffers from the problem of dying RELU, in which a RELU unit always outputs 0. As gradient is 0 when output is 0, therefore no weights updation happens, so the weights remain the same and RELU is very less likely to recover from this during the course of training. Dying RELU happens when there is a large grad flow and $W$ becomes big -ve numbers. . Leaky RELU . Tries to solve the dying RELU problem by having some slop for -ve input. It is defined as: . $RELU(x) = max(x, alpha*x)$, where $ alpha$ is generally a small +ve number in $(0,1)$. . y = np.maximum(x, 0.1*x) fig,ax = plt.subplots(figsize = (5,5)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.plot(x, y, color=&#39;red&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f5f51603ac8&gt;] . All activation functions together . x = np.linspace(-5,5, 100) sig = 1/(1 + np.exp(-x)) tanh = np.tanh(x) x = np.linspace(-2,2, 100) relu = np.maximum(x, 0) lrelu = np.maximum(x, 0.1*x) fig,ax = plt.subplots(figsize = (10,7)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.plot(x, sig, marker = &#39;+&#39;, label = &#39;sigmoid&#39;) ax.plot(x, tanh, marker = &#39;.&#39;, label = &#39;tanh&#39;) ax.plot(x, relu, linestyle = &#39;--&#39;, label = &#39;RELU&#39;) ax.plot(x, lrelu, linestyle = &#39;:&#39;, label = &#39;Leaky RELU&#39;) ax.legend() ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) . Conclusion . Activation Functions are the way to add non-linearity to our neural networks, and it is because of them that a fairly deep neural network is useful for complex functions representations, otherwise, it would be as good as a single layer neural network. I have included most of the commonly used activation functions, but there are many more. . $^{**}$credits: Fast.ai .",
            "url": "https://nitishsadire.github.io/DLblog/jupyter/2020/10/22/DLforCNN.html",
            "relUrl": "/jupyter/2020/10/22/DLforCNN.html",
            "date": " • Oct 22, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Deep Learning Introduction",
            "content": "Introduction . Deep Learning is a technique to extract and transform data from an input dataset, by using a deep network of neural network layers. By deep means that the number of layers is huge, could be as big as 100s of layers. Layers in any deep neural network are in one of the following categories: . Input Layer: This is the layer where the input is applied to the network. | Hidden Layers: These are all the layers between the input layer and the output layer of a neural network. Each layer has multiple neurons (described in the next section). A neuron applies weights (linear function) to the input received and directs it through an activation function (non-linear function). Each hidden layer receives input as the output of the previous layer, applies transformations on the input, and gives output to the next layer. | Output Layer: This layer computes the output of the network in the format we want. E.g. In classification problem if there are C classes, then generally output layer gives a C length vector containing probabilities for each class, and we predict the class with the highest probability. | . The output of the neural network is compared against the true-output, and a loss-value is calculated using a loss function. . A loss function takes input as the network&#39;s output $( hat{y})$ and true-output$(y)$ and computes a scalar value which depicts our happiness or unhappiness with the result. E.g. If we have 5 classes, i.e. $C=5$, and we get $y=2$, but $ hat{y}=1$, it means that our network classifies input into class 2, but the ground truth showing input of class 1. To give feedback of our unhappiness to the network our loss value should be a high positive number. If $ hat{y} = y$ then our loss should be 0. High positive loss value means unhappiness and vice-versa because the network tries to minimize the loss value, as we will see in the next sections. . An image of a neural network, with 3 hidden layers (which is not so deep) is shown below. Here each node is a neuron and edges are weights. . . Neuron . A neuron is the fundamental block of a neural network. Each neuron has weights, bias, and an activation function associated with it, as shown in the figure below. It receives inputs $x_i$, each input $x_i$ is multiplied with weight $w_i$, and bias $b$ is added to the final product, therefore $sum = Sigma{(w_i.x_i)} + b$. Now activation function $ phi()$ is applied on the sum, so $y = phi( Sigma{(w_i.x_i)} + b )$. Some most commonly used activation functions are RELU, sigmoid, etc. . . Parameters Updation . When we feed an input into the neural network then it gives output $ hat{y}$. Let&#39;s have $y$ as ground truth label, and loss is $L = f(y, hat{y})$, where $f()$ is our loss function. We know that layer $L_i$ takes input as an output of layer $L_{i-1}$, which in turn takes input from the output of layer $L_{i-2}$, and so on. The point is that layer $L_i$ output depends on all the layers before it. Therefore the final neural network output $y$ could be thought of as a complex function taking all the network parameters (weights and bias of all neurons of all the layers) as input to that function. Mathematically, if $N()$ is a neural network function involving all parameters, and input is x, then loss $L = f(y, N(x))$ . Now we can compute derivatives of L w.r.t. to each parameter of neural network, $ frac{ partial{L}}{ partial(p)}$, for all parameters p of the network. $ frac{ partial{L}}{ partial(p)}$ gives the direction of the steepest ascent of the loss L w.r.t. to parameter p, which means the direction in which if we little bit change p then the value of L will increase the most. Therefore if we move p in the exact opposite direction then that will be the steepest descent direction, and so L will decrease the most. So, we can update parameter p as: $p = p - alpha frac{ partial{L}}{ partial(p)}$, where $ alpha$ is known as the learning rate, the length of the step we have taken in the steepest descent direction. . This is known as the classic Gradient Descent Algorithm for parameters updation. We can update all the parameters in a similar way, i.e. by computing gradient of loss L w.r.t. to a parameter, and then applying Gradient Descent Algorithm . Network Training . Suppose we have set of n training examples as $ {(x_1, y_1), (x_2, y_2), ... , (x_n, y_n) }$, where $x_i$ is the $i^{th}$ training example and $y_i$ is the true class label for $i^{th}$ training example. We can initialize all the network parameters with randomly small values, and update them after each iteration. The training steps could be defined as: . Computing neural network output on $x_1, x_2, ..., x_n$. | Computing loss as $f(y_1, hat{y_1}), f(y_2, hat{y_2}), ..., f(y_n, hat{y_n}) $, where $ hat{y_1}$ is class predicted by the neural network, and taking average value of loss | We compute gradients of average loss w.r.t. all the network parameters and update their values so as to minimize the loss. | . Keep on repeating the above steps until the loss converges. Going through all the training examples for once is known as 1 epoch. We can continue to train for multiple epochs until the loss converges. . Once training is done, we&#39;ll end up with such network weights which are far better than initial random weights in prediction, and we can use the same weights for inference on new unseen data. . Conclusion . I have covered a very basic understanding of deep learning models and terminology. In practice, the models which are deployed in production are very advanced and different, but the fundamental ideas remain the same. We will delve into a lot more deep learning topics in later posts. .",
            "url": "https://nitishsadire.github.io/DLblog/jupyter/2020/10/14/DLforCNN.html",
            "relUrl": "/jupyter/2020/10/14/DLforCNN.html",
            "date": " • Oct 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Nitish Sandhu, M.Tech from Computer Science and Automation Department, IISc (2018), B.Tech from Computer Science Engineering Department, NIT Kurukshetra (2015). .",
          "url": "https://nitishsadire.github.io/DLblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nitishsadire.github.io/DLblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}