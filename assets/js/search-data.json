{
  
    
        "post0": {
            "title": "Optimisation Algorithms Part I",
            "content": "Introduction . There are millions of parameters in a typical deep neural network, and these parameters are initialized with random values. Now as the training proceeds, as mentioned in the previous post, we fed the training examples into the network and compute loss using a loss function, and take gradients of loss w.r.t. all the parameters so as to update them. Now with the updated network parameters we again fed the training data, and this process repeats time and again until the loss converges. The part where we update the parameters of the network is the focus of today&#39;s post. . To update a parameter means to change it&#39;s value so as to minimize the loss we incurred. It is an optimization problem where the objective function is the loss function $L(w)$, $w$ is the parameter we are updating, and ideally, we want to find the global minima of loss function $L$ for parameter w, if such global minima exist, otherwise find local minima. One such method to find a minima. as mentioned in the previous post, as Gradient Descent (GD) also known as Vanilla Gradient Descent, where we take a small step in the direction of the negative gradient ($- frac{ partial{L}}{ partial{w}}$). There are numerous issues with GD, like: . Too much memory is required to feed all the training examples at once to the model. | What if we reached a saddle point (a point which is not local extremum but having gradient 0, please refer wikipedia), then gradient will be zero there and no updation will happen. | Because of such issues, it&#39;s hardly used in practice. Other optimization algorithms have fundamental ideas the same as gradient descent but they encounter the issues faced by it. . Stochastic Gradient Descent (SGD) . It&#39;s a computational improvement over gradient descent as rather than fedding the whole training data it feds data in batches. So if there are n training examples, then the batch size ($b$) could be $1 leq b leq n$. Batch-size is chosen based on memory availability. Mathematically, . $x_{t+1} = x_t - alpha. frac{ partial{L}}{ partial{x_t}}$ . Some of the issues with SGD are: . Not whole data is fed at once, so gradients will be noisy. By noisy I mean that because each batch will have a different set of examples, so they try to change the parameters in different directions, therefore there won&#39;t be a smooth curve to the minima, as shown below. | . . What if the rate of change of loss is different in different directions. For example, as shown below, the contours of loss function form an ellipse, and function changes faster along the y-axis than the x-axis. Therefore the magnitude of the gradient along the y-axis will be more than the x-axis, and so the net direction of the gradient will align more with the y-axis. Therefore, the negative of the gradient will also align more with the y-axis, and hence the SGD will follow a zigzag path, which will take longer to converge. | . . Issues with saddle points still exists. | . SGD + Momentum . In SGD with Momentum, at any time t+1, the direction is not determined by $x_t$, but all the gradients from the beginning. Mathematically, if $v_0 = 0$ then, . $v_{t+1} = rho v_t + frac{ partial{L}}{ partial{x_t}}$ . $x_{t+1} = x_t - alpha.v_{t+1}$ . typically, $ rho$=0.9, or 0.99. $v_t$ is known as velocity which is actually the running mean of gradients. Velocity at a point has exponentially decaying weighted sum of previous gradients (older the gradient is less is its weight). Therefore it&#39;s less noisy than SGD because gradients of other batches are also added. . Also in case of different rates of change of loss along with different dimensions, velocity gives better direction, plus the dimension along which there is less rate of change of loss function will have better velocity than in a normal SGD. So convergence will be faster as the path will be less zigzag. The velocity increases for dimension whose gradients point in the same direction and reduces for dimensions whose updates are in different directions. Therefore there will be less oscillation while converging. . It won&#39;t get stuck in saddle point because of velocity. Also, it will overshoot local minima but will come back and approach the minima again. . Nesterov Momentum . One issue with SGD+Momentum is that the gradients could accumulate which leads to a high gradient in a particular direction, which is not good because it could surpass the local minima, also convergence will be slower as it has to move back and forth to reach a local minima. Imagine like a ball is running downhill, then SGD+Momentum could be thought of as ball accumulating very high velocity, so could surpass a local minima and will try to climb an uphill. Nesterov Momentum update tries to correct this &quot;blindly following the slope&quot; nature of SGD+Momentum by calculating the slope of the future point, and moving in the -ve of net gradient direction. Mathematically, . $v_{t+1} = rho v_t + alpha nabla_{x_t}L(x_t - rho v_t)$ . $x_{t+1} = x_t - v_{t+1}$ . So here, firstly gradient of loss function L w.r.t to $x_t$ is computed at the approximate future point $x_t - rho v_t$ (it&#39;s approximate because actual future point is $x_t - rho v_t -$ gradient_of_L_w.r.t_x_t), so we have gradient knowledge of the next point. Now we add accumulated velocities to it and make an update on x. . This anticipatory update prevents us from going too fast and results in better updates, which has significantly increased performance on DL models. . Now that we are able to adapt our updates to the slope of our error function and speed up SGD in turn, we would also like to adapt our updates to each individual parameter to perform larger or smaller updates. . SGD+Momentum and Nesterov Momentum updates are shown below in the figure. SGD+M computes gradient first (small blue vector) and then takes a step in the net direction of -ve accumulated gradients (big blue vector). Whereas, Nesterov goes in the direction of previously accumulated gradients (big brown vector), then finds gradient at approximate next point, and takes a step in -ve gradient direction (small red vector), so that the resultant direction (big green vector) is different from SGD+M. . . Conclusion . We have covered Vanilla GD, SGD, SGD+Momentum, and Nesterov Momentum algorithms. All these optimization algorithms need fine-tuning for a learning rate of $ alpha$. If $ alpha$ too big then it will surpass the local minima or even diverge, if it&#39;s too small then convergence will be very slow. In Part II, we&#39;ll look at adaptive optimization algorithms, that will manage the learning rate for every parameter by itself, which is a very huge benefit over non-adaptive algorithms we have covered so far. .",
            "url": "https://nitishsadire.github.io/DLblog/2020/10/29/DLforCNN2.html",
            "relUrl": "/2020/10/29/DLforCNN2.html",
            "date": " • Oct 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Activation Function",
            "content": "Introduction . We have seen in the last post that each neuron has weights, bias, and an activation function associated with it. It receives inputs $x_i$, each input $x_i$ is multiplied with weight $w_i$, and bias $b$ is added to the final product, therefore $sum = Sigma{(w_i.x_i)} + b$. Now activation function $ phi()$ is applied on the sum, so $y = phi( Sigma{(w_i.x_i)} + b )$. . If $w$ is a vector where $i^{th}$ value is $w_i$, and $x$ is vector where $i^{th}$ value is $x_i$, then $ Sigma{(w_i.x_i)} + b$ could be written as $w.x^T + b$. There output from a neuron is $ phi( w.x^T + b)$. . Need for the activation function . Suppose there are two neurons, one after another, and the output of the first is input to the second neuron, and there are no activation functions involved. Then, . $y_1 = w_1.x^T + b_1$ . $y_2 = w_2.{y_1}^T + b_2$ . If we substitute $y_1$ in second equation RHS then these both could be written together in a single equation as: $y_2 = w.x^T + b$, where $w = w_2.w_1$ and $b = w_2.b_1 + b_2$. . Therefore, we have replaced 2 linear layers with a single linear layer by changing the weights and bias as mentioned. This could be done even if we have 100s of linear layers stacked upon one another, thus, no matter how deep our network is we can re-write it as a single layer network. If we introduce a non-linear layer in between every 2 linear layers, then we can&#39;t replace them with a single neuron. Now each linear layer is actually somewhat decoupled from the other ones and can do its own useful work. . The addition of a non-linear layer or an activation function increases the power of a neural network. By power I mean our network could approximate any function (neural network could be seen as a function which maps an input $x$ to an output $y$), with accuracy as good as we want, all we have to do is to find the right set of weights and biases to do it. This fact is mathematically proven as a universal approximation theorem. . A single nonlinearity with two linear layers is enough to approximate any function. So why would we use deeper models? The reason is performance. With a deeper model (that is, one with more layers) we do not need to use as many parameters; it turns out that we can use smaller matrices with more layers, and get better results than we would get with larger matrices and few layers.$^{**}$ . Some commonly used activation functions . Sigmoid . A sigmoid function is defined as: . $sigmoid(x) = frac{1}{1+e^{-x}}$ . x = np.linspace(-7,7,100) y = 1/(1 + np.exp(-x)) fig,ax = plt.subplots(figsize = (5,5)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.plot(x, y, color=&#39;red&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f5f5161fba8&gt;] . So, a sigmoid function squashes any real number in the range $(0,1)$, therefore, interpretable as probabilities. One of the big disadvantages of the sigmoid function is that its output is not zero-centered, which will be input to the next layer. . The problem if input data is not zero-centered data: . Mostly input data is +ve, so if $a = WX + b$, and $X$ is +ve, then the gradient of $W$ is +ve, or -ve, depending on the value $ frac{ partial{L}}{ partial{a}}$. So if optimal $W$ has both +ve and -ve values, but we end up searching for sub-optimal $W$. in case of 2-d, if $W_{opt}$ lies in $2^{nd}$ or $4^{th}$ quadrant, but we are only searching only in $1^{st}$ and $3^{rd}$ quadrant. . Another issue that saturated values kill the gradients during backpropagation, means that when input is a big positive or a negative number, then the slope of sigmoid in that region is very close to 0. So, in backpropagation, it gives a gradient close to 0 to its previous layers, and therefore very small or practically no weight-updation is performed on the network, thus network stops training. This is vanishing gradient problem. . Tanh . This is a hyperbolic tangent function with the range in (-1, 1), which makes it zero centered, a benefit over sigmoid. . y = np.tanh(x) fig,ax = plt.subplots(figsize = (5,5)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.plot(x, y, color=&#39;red&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f5f5162e390&gt;] . In tanh also, saturated values kill the gradients during backpropagation, and therefore vanishing gradient problem still exists. . RELU . It is the most widely used activation function which is surprisingly mathematically simpler than sigmoid, or tanh, and mostly gives better results than them. It is defined as: . $RELU(x) = max(x,0)$ . y = np.maximum(x,0) fig,ax = plt.subplots(figsize = (5,5)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.plot(x, y, color=&#39;red&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f5f5155bba8&gt;] . Some of the key points regarding RELU are: . Doesn’t saturate in the +ve region. | Computationally efficient to compute. | Convergence is faster. | Not zero centered outputs. | Gradient saturation in the negative half. | RELU has one major issue that it suffers from the problem of dying RELU, in which a RELU unit always outputs 0. As gradient is 0 when output is 0, therefore no weights updation happens, so the weights remain the same and RELU is very less likely to recover from this during the course of training. Dying RELU happens when there is a large grad flow and $W$ becomes big -ve numbers. . Leaky RELU . Tries to solve the dying RELU problem by having some slop for -ve input. It is defined as: . $RELU(x) = max(x, alpha*x)$, where $ alpha$ is generally a small +ve number in $(0,1)$. . y = np.maximum(x, 0.1*x) fig,ax = plt.subplots(figsize = (5,5)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=20, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) ax.plot(x, y, color=&#39;red&#39;) . [&lt;matplotlib.lines.Line2D at 0x7f5f51603ac8&gt;] . All activation functions together . x = np.linspace(-5,5, 100) sig = 1/(1 + np.exp(-x)) tanh = np.tanh(x) x = np.linspace(-2,2, 100) relu = np.maximum(x, 0) lrelu = np.maximum(x, 0.1*x) fig,ax = plt.subplots(figsize = (10,7)) ax.set_xlabel(&quot;x&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.set_ylabel(&quot;f(x)&quot;, labelpad=5, fontsize=26, fontname=&#39;serif&#39;, color=&quot;blue&quot;) ax.plot(x, sig, marker = &#39;+&#39;, label = &#39;sigmoid&#39;) ax.plot(x, tanh, marker = &#39;.&#39;, label = &#39;tanh&#39;) ax.plot(x, relu, linestyle = &#39;--&#39;, label = &#39;RELU&#39;) ax.plot(x, lrelu, linestyle = &#39;:&#39;, label = &#39;Leaky RELU&#39;) ax.legend() ax.grid(which=&#39;major&#39;, axis=&#39;both&#39;, linestyle=&#39;:&#39;, linewidth = 1, color=&#39;b&#39;) . Conclusion . Activation Functions are the way to add non-linearity to our neural networks, and it is because of them that a fairly deep neural network is useful for complex functions representations, otherwise, it would be as good as a single layer neural network. I have included most of the commonly used activation functions, but there are many more. . $^{**}$credits: Fast.ai .",
            "url": "https://nitishsadire.github.io/DLblog/jupyter/2020/10/22/DLforCNN.html",
            "relUrl": "/jupyter/2020/10/22/DLforCNN.html",
            "date": " • Oct 22, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Deep Learning Introduction",
            "content": "Introduction . Deep Learning is a technique to extract and transform data from an input dataset, by using a deep network of neural network layers. By deep means that the number of layers is huge, could be as big as 100s of layers. Layers in any deep neural network are in one of the following categories: . Input Layer: This is the layer where the input is applied to the network. | Hidden Layers: These are all the layers between the input layer and the output layer of a neural network. Each layer has multiple neurons (described in the next section). A neuron applies weights (linear function) to the input received and directs it through an activation function (non-linear function). Each hidden layer receives input as the output of the previous layer, applies transformations on the input, and gives output to the next layer. | Output Layer: This layer computes the output of the network in the format we want. E.g. In classification problem if there are C classes, then generally output layer gives a C length vector containing probabilities for each class, and we predict the class with the highest probability. | . The output of the neural network is compared against the true-output, and a loss-value is calculated using a loss function. . A loss function takes input as the network&#39;s output $( hat{y})$ and true-output$(y)$ and computes a scalar value which depicts our happiness or unhappiness with the result. E.g. If we have 5 classes, i.e. $C=5$, and we get $y=2$, but $ hat{y}=1$, it means that our network classifies input into class 2, but the ground truth showing input of class 1. To give feedback of our unhappiness to the network our loss value should be a high positive number. If $ hat{y} = y$ then our loss should be 0. High positive loss value means unhappiness and vice-versa because the network tries to minimize the loss value, as we will see in the next sections. . An image of a neural network, with 3 hidden layers (which is not so deep) is shown below. Here each node is a neuron and edges are weights. . . Neuron . A neuron is the fundamental block of a neural network. Each neuron has weights, bias, and an activation function associated with it, as shown in the figure below. It receives inputs $x_i$, each input $x_i$ is multiplied with weight $w_i$, and bias $b$ is added to the final product, therefore $sum = Sigma{(w_i.x_i)} + b$. Now activation function $ phi()$ is applied on the sum, so $y = phi( Sigma{(w_i.x_i)} + b )$. Some most commonly used activation functions are RELU, sigmoid, etc. . . Parameters Updation . When we feed an input into the neural network then it gives output $ hat{y}$. Let&#39;s have $y$ as ground truth label, and loss is $L = f(y, hat{y})$, where $f()$ is our loss function. We know that layer $L_i$ takes input as an output of layer $L_{i-1}$, which in turn takes input from the output of layer $L_{i-2}$, and so on. The point is that layer $L_i$ output depends on all the layers before it. Therefore the final neural network output $y$ could be thought of as a complex function taking all the network parameters (weights and bias of all neurons of all the layers) as input to that function. Mathematically, if $N()$ is a neural network function involving all parameters, and input is x, then loss $L = f(y, N(x))$ . Now we can compute derivatives of L w.r.t. to each parameter of neural network, $ frac{ partial{L}}{ partial(p)}$, for all parameters p of the network. $ frac{ partial{L}}{ partial(p)}$ gives the direction of the steepest ascent of the loss L w.r.t. to parameter p, which means the direction in which if we little bit change p then the value of L will increase the most. Therefore if we move p in the exact opposite direction then that will be the steepest descent direction, and so L will decrease the most. So, we can update parameter p as: $p = p - alpha frac{ partial{L}}{ partial(p)}$, where $ alpha$ is known as the learning rate, the length of the step we have taken in the steepest descent direction. . This is known as the classic Gradient Descent Algorithm for parameters updation. We can update all the parameters in a similar way, i.e. by computing gradient of loss L w.r.t. to a parameter, and then applying Gradient Descent Algorithm . Network Training . Suppose we have set of n training examples as $ {(x_1, y_1), (x_2, y_2), ... , (x_n, y_n) }$, where $x_i$ is the $i^{th}$ training example and $y_i$ is the true class label for $i^{th}$ training example. We can initialize all the network parameters with randomly small values, and update them after each iteration. The training steps could be defined as: . Computing neural network output on $x_1, x_2, ..., x_n$. | Computing loss as $f(y_1, hat{y_1}), f(y_2, hat{y_2}), ..., f(y_n, hat{y_n}) $, where $ hat{y_1}$ is class predicted by the neural network, and taking average value of loss | We compute gradients of average loss w.r.t. all the network parameters and update their values so as to minimize the loss. | . Keep on repeating the above steps until the loss converges. Going through all the training examples for once is known as 1 epoch. We can continue to train for multiple epochs until the loss converges. . Once training is done, we&#39;ll end up with such network weights which are far better than initial random weights in prediction, and we can use the same weights for inference on new unseen data. . Conclusion . I have covered a very basic understanding of deep learning models and terminology. In practice, the models which are deployed in production are very advanced and different, but the fundamental ideas remain the same. We will delve into a lot more deep learning topics in later posts. .",
            "url": "https://nitishsadire.github.io/DLblog/jupyter/2020/10/14/DLforCNN.html",
            "relUrl": "/jupyter/2020/10/14/DLforCNN.html",
            "date": " • Oct 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Nitish Sandhu, M.Tech from Computer Science and Automation Department, IISc (2018), B.Tech from Computer Science Engineering Department, NIT Kurukshetra (2015). .",
          "url": "https://nitishsadire.github.io/DLblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nitishsadire.github.io/DLblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}